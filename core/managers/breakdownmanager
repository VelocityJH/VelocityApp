import Foundation
import UIKit

final class BreakdownManager: ObservableObject {
    static let shared = BreakdownManager()

    @Published private(set) var openBreakdowns: [Breakdown] = []

    private init() {}

    // Add new breakdown
    func addBreakdown(_ breakdown: Breakdown) {
        openBreakdowns.append(breakdown)
    }

    // Update breakdown status
    func updateStatus(for breakdown: Breakdown, to newStatus: BreakdownStatus) {
        guard let index = openBreakdowns.firstIndex(where: { $0.id == breakdown.id }) else { return }

        openBreakdowns[index].status = newStatus
        openBreakdowns[index].endTime = Date()

        NotificationManager.shared.send(
            message: "âœ… Job completed: \(breakdown.area) - \(breakdown.equipment) by \(UserManager.shared.username)"
        )
    }

    // Join job
    func addEngineer(to breakdown: Breakdown, engineerName: String) {
        guard let index = openBreakdowns.firstIndex(where: { $0.id == breakdown.id }) else { return }

        if !openBreakdowns[index].joinedEngineers.contains(engineerName) {
            openBreakdowns[index].joinedEngineers.append(engineerName)

            NotificationManager.shared.send(
                message: "ðŸ›  \(engineerName) joined: \(breakdown.area) - \(breakdown.equipment)"
            )
        }
    }

    // Leave job
    func removeEngineer(from breakdown: Breakdown, engineerName: String) {
        guard let index = openBreakdowns.firstIndex(where: { $0.id == breakdown.id }) else { return }

        openBreakdowns[index].joinedEngineers.removeAll { $0 == engineerName }
    }
}