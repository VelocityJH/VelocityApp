import SwiftUI
import PhotosUI

struct CWOCreationView: View {
    @EnvironmentObject var partsManager: SparePartsManager

    @State private var workDescription: String = ""
    @State private var selectedItem: PhotosPickerItem?
    @State private var selectedImage: UIImage?

    var body: some View {
        ZStack {
            Color("velocityBlue").ignoresSafeArea()

            ScrollView {
                VStack(alignment: .leading, spacing: 25) {
                    Text("Create CWO")
                        .font(.largeTitle.bold())
                        .foregroundColor(.white)
                        .padding(.top, 40)
                        .frame(maxWidth: .infinity, alignment: .center)

                    // Brief Work Description
                    Text("Brief Work Description:")
                        .foregroundColor(.white)
                        .bold()
                        .padding(.horizontal)

                    TextEditor(text: $workDescription)
                        .frame(height: 120)
                        .padding()
                        .background(Color.white)
                        .cornerRadius(12)
                        .padding(.horizontal)

                    // Parts Required
                    Text("Parts Required:")
                        .foregroundColor(.white)
                        .bold()
                        .padding(.horizontal)

                    ForEach(partsManager.selectedParts, id: \.id) { part in
                        Text("\(part.name) - \(part.number)")
                            .foregroundColor(.white)
                            .padding(.horizontal)
                    }

                    // Attach Image
                    Text("Attach Image:")
                        .foregroundColor(.white)
                        .bold()
                        .padding(.horizontal)

                    PhotosPicker(selection: $selectedItem, matching: .images) {
                        Text("Choose Image")
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.orange)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                            .padding(.horizontal)
                    }
                    .onChange(of: selectedItem) { newItem in
                        Task {
                            if let data = try? await newItem?.loadTransferable(type: Data.self),
                               let uiImage = UIImage(data: data) {
                                selectedImage = uiImage
                            }
                        }
                    }

                    if let image = selectedImage {
                        Image(uiImage: image)
                            .resizable()
                            .scaledToFit()
                            .cornerRadius(10)
                            .padding(.horizontal)
                    }

                    // Submit Button
                    Button(action: {
                        submitCWO()
                    }) {
                        Text("Submit CWO")
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.green)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                    }
                    .padding(.horizontal)
                    .padding(.bottom, 40)
                }
            }
        }
    }

    func submitCWO() {
        // Your logic to save or send the CWO
        print("Submitted work description: \(workDescription)")
        print("Selected parts: \(partsManager.selectedParts.count)")
        if selectedImage != nil {
            print("Image attached.")
        }
    }
}