import SwiftUI

struct SelectPartsView: View {
    let allParts: [SparePart]
    let onSelection: ([SparePart]) -> Void
    
    @Environment(\.dismiss) var dismiss
    @State private var searchText: String = ""
    @State private var selectedPartIDs: Set<UUID> = []

    var filteredParts: [SparePart] {
        if searchText.isEmpty {
            return allParts
        } else {
            return allParts.filter {
                $0.number.localizedCaseInsensitiveContains(searchText)
            }
        }
    }

    var body: some View {
        ZStack {
            StandardBackgroundView().ignoresSafeArea()

            VStack(spacing: 12) {
                TopNavBar(
                    title: "Select Parts",
                    onBack: { dismiss() },
                    onHome: { dismiss() }
                )

                TextField("Search part number", text: $searchText)
                    .textFieldStyle(.roundedBorder)
                    .padding(.horizontal)

                List {
                    ForEach(filteredParts) { part in
                        HStack {
                            VStack(alignment: .leading) {
                                Text(part.name).bold()
                                Text("Number: \(part.number)")
                                Text("Stock: \(part.stock)")
                                Text("Location: \(part.location)").font(.caption)
                            }
                            Spacer()
                            Image(systemName: selectedPartIDs.contains(part.id) ? "checkmark.circle.fill" : "circle")
                                .foregroundColor(.blue)
                                .onTapGesture {
                                    toggleSelection(for: part)
                                }
                        }
                        .padding(.vertical, 4)
                    }
                }
                .listStyle(.plain)

                Button("Done") {
                    let selected = allParts.filter { selectedPartIDs.contains($0.id) }
                    onSelection(selected)
                    dismiss()
                }
                .padding()
                .frame(maxWidth: .infinity)
                .background(Color.green)
                .foregroundColor(.white)
                .cornerRadius(12)
                .padding(.horizontal)
            }
        }
        .navigationBarBackButtonHidden(true)
        .navigationBarHidden(true)
    }

    private func toggleSelection(for part: SparePart) {
        if selectedPartIDs.contains(part.id) {
            selectedPartIDs.remove(part.id)
        } else {
            selectedPartIDs.insert(part.id)
        }
    }
}