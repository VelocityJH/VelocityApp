import SwiftUI

struct SelectPartsView: View {
    let allParts: [SparePart]
    let onSelection: ([SparePart]) -> Void

    @Environment(\.dismiss) private var dismiss
    @State private var searchQuery = ""
    @State private var selectedParts: Set<UUID> = []

    var filteredParts: [SparePart] {
        if searchQuery.isEmpty {
            return allParts
        } else {
            return allParts.filter {
                $0.name.localizedCaseInsensitiveContains(searchQuery) ||
                $0.number.localizedCaseInsensitiveContains(searchQuery)
            }
        }
    }

    var body: some View {
        ZStack {
            StandardBackgroundView().ignoresSafeArea()

            VStack(spacing: 16) {
                TopNavBar(title: "Select Parts", onBack: { dismiss() }, onHome: { dismiss() })

                TextField("Search Part Name or Number", text: $searchQuery)
                    .textFieldStyle(.roundedBorder)
                    .padding(.horizontal)

                List(filteredParts) { part in
                    HStack {
                        VStack(alignment: .leading) {
                            Text(part.name).bold()
                            Text("Stock: \(part.stock)")
                            Text("Location: \(part.location)").font(.caption)
                        }
                        Spacer()
                        Image(systemName: selectedParts.contains(part.id) ? "checkmark.circle.fill" : "circle")
                            .onTapGesture {
                                toggleSelection(for: part)
                            }
                    }
                }
                .listStyle(.plain)

                Button("âœ… Confirm Selection") {
                    let selected = allParts.filter { selectedParts.contains($0.id) }
                    onSelection(selected)
                    dismiss()
                }
                .padding()
                .frame(maxWidth: .infinity)
                .background(Color.green)
                .foregroundColor(.white)
                .cornerRadius(10)
                .padding(.horizontal)
            }
        }
        .navigationBarBackButtonHidden(true)
        .navigationBarHidden(true)
    }

    private func toggleSelection(for part: SparePart) {
        if selectedParts.contains(part.id) {
            selectedParts.remove(part.id)
        } else {
            selectedParts.insert(part.id)
        }
    }
}