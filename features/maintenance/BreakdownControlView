import SwiftUI

struct BreakdownControlView: View {
    @Environment(\.dismiss) var dismiss
    var breakdown: Breakdown

    @State private var showSupportPopup = false
    @State private var selectedSupportTeam: String?
    @State private var showRectificationPrompt = false
    @State private var rectificationText = ""
    @State private var selectedParts: [SparePart] = []

    var body: some View {
        ZStack {
            StandardBackgroundView().ignoresSafeArea()

            ScrollView {
                VStack(spacing: 0) {
                    TopNavBar(title: "Breakdown Control", onBack: { dismiss() }, onHome: { dismiss() })

                    VStack(alignment: .leading, spacing: 20) {
                        // Breakdown Info
                        Group {
                            Text("Zone: \(breakdown.zone)")
                            Text("Equipment: \(breakdown.equipment)")
                            Text("Reported: \(breakdown.timeSubmitted.formatted(.dateTime.hour().minute()))")
                        }
                        .foregroundColor(.white)
                        .padding(.horizontal)

                        // Spare Parts Selector
                        NavigationLink(destination:
                            SelectPartsView(
                                allParts: SparePartManager.shared.availableParts,
                                selectedParts: $selectedParts
                            )
                        ) {
                            Text("Go to Spare Parts")
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(Color.white)
                                .cornerRadius(10)
                        }
                        .padding(.horizontal)

                        // Selected Parts (local to this breakdown)
                        if !selectedParts.isEmpty {
                            VStack(alignment: .leading, spacing: 8) {
                                Text("Selected Parts:")
                                    .font(.headline)
                                    .foregroundColor(.white)

                                ForEach(selectedParts) { part in
                                    HStack {
                                        VStack(alignment: .leading, spacing: 2) {
                                            Text(part.name)
                                                .foregroundColor(.white)
                                            Text("Location: \(part.location)")
                                                .font(.caption)
                                                .foregroundColor(.gray)
                                            Text("Qty: 1")
                                                .font(.caption2)
                                                .foregroundColor(.gray)
                                        }
                                        Spacer()
                                        Button(action: {
                                            selectedParts.removeAll(where: { $0.id == part.id })
                                        }) {
                                            Image(systemName: "trash")
                                                .foregroundColor(.red)
                                        }
                                    }
                                    .padding(8)
                                    .background(Color.black.opacity(0.2))
                                    .cornerRadius(8)
                                }
                            }
                            .padding(.horizontal)
                        }

                        // Request Support
                        Button("Request Support") {
                            showSupportPopup = true
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.orange)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .padding(.horizontal)

                        // Fault Trees & Manuals
                        Button("Open Fault Trees & Manuals") {
                            // Future OCR/manuals feature
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .padding(.horizontal)

                        // Complete Job
                        Button("âœ… Complete Job") {
                            showRectificationPrompt = true
                        }
                        .frame(height: 50)
                        .frame(maxWidth: .infinity)
                        .background(Color.green)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                        .padding(.horizontal)
                    }
                    .padding(.top)
                    .padding(.bottom, 40)
                }
            }
        }
        // Support popup
        .confirmationDialog("Who do you request?", isPresented: $showSupportPopup) {
            Button("Riv Techs") { selectedSupportTeam = "Riv Techs" }
            Button("Controls") { selectedSupportTeam = "Controls" }
            Button("Cancel", role: .cancel) {}
        }

        // Rectification alert
        .alert("How did you rectify the issue?", isPresented: $showRectificationPrompt) {
            TextField("Enter details...", text: $rectificationText)
            Button("Submit") {
                // Simulate job completion
                selectedParts.removeAll()
                dismiss()
            }
            Button("Cancel", role: .cancel) {}
        }

        .navigationBarHidden(true)
    }
}