import SwiftUI

struct ReportBreakdownView: View {
    @Environment(\.dismiss) var dismiss
    @ObservedObject var userManager = UserManager.shared
    @ObservedObject var breakdownManager = BreakdownManager.shared

    @State private var zone: String = ""
    @State private var equipment: String = ""
    @State private var faultSummary: String = ""
    @State private var navigateToControl = false
    @State private var newBreakdown: Breakdown?

    var body: some View {
        ZStack {
            StandardBackgroundView().ignoresSafeArea()

            VStack(spacing: 20) {
                TopNavBar(title: "Report Breakdown", onBack: { dismiss() }, onHome: { dismiss() })

                // Placeholder for QR Scan
                Button("Scan Zone/Equipment QR") {
                    // Future: Trigger scanner here
                }
                .frame(maxWidth: .infinity)
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)

                TextField("Zone", text: $zone)
                    .textFieldStyle(.roundedBorder)

                TextField("Equipment", text: $equipment)
                    .textFieldStyle(.roundedBorder)

                TextField("Fault Summary", text: $faultSummary)
                    .textFieldStyle(.roundedBorder)

                // Placeholder for Image Picker
                Button("Capture Image of Issue") {
                    // Future: Trigger camera/image picker here
                }
                .frame(maxWidth: .infinity)
                .padding()
                .background(Color.orange)
                .foregroundColor(.white)
                .cornerRadius(10)

                Button("Submit Breakdown") {
                    submitBreakdown()
                }
                .buttonStyle(.borderedProminent)

                NavigationLink(
                    destination: {
                        if let breakdown = newBreakdown {
                            BreakdownControlView(breakdown: breakdown)
                        }
                    },
                    isActive: $navigateToControl,
                    label: { EmptyView() }
                )
            }
            .padding()
        }
        .navigationBarHidden(true)
    }

    private func submitBreakdown() {
        let reporter = userManager.username

        let breakdown = Breakdown(
            zone: zone,
            equipment: equipment,
            faultSummary: faultSummary,
            submittedBy: reporter,
            timeSubmitted: Date(),
            status: "Open",
            downtime: 0,
            joinedEngineers: [],
            endTime: nil,
            completedBy: nil,
            rectificationText: nil,
            startTime: Date()
        )

        breakdownManager.addBreakdown(breakdown)
        breakdownManager.joinJob(breakdown: breakdown)
        newBreakdown = breakdown
        navigateToControl = true
    }
}