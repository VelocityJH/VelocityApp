import SwiftUI

struct ReportBreakdownView: View {
    @Environment(\.dismiss) var dismiss
    @ObservedObject var userManager = UserManager.shared
    @ObservedObject var breakdownManager = BreakdownManager.shared
    
    @State private var zone = ""
    @State private var equipment = ""
    @State private var faultSummary = ""
    @State private var navigateToControl = false
    @State private var newBreakdown: Breakdown? = nil
    
    var body: some View {
        ZStack {
            StandardBackgroundView().ignoresSafeArea()

            VStack(spacing: 0) {
                TopNavBar(title: "Report Breakdown", onBack: { dismiss() }, onHome: { dismiss() })

                ScrollView {
                    VStack(spacing: 20) {
                        Spacer(minLength: 40)

                        // Zone QR scan
                        Button("Scan Zone QR Code") {
                            // Placeholder for QR code scan
                            zone = "Zone 3 - Robot Arm 7"
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.orange)
                        .foregroundColor(.white)
                        .cornerRadius(10)

                        TextField("Zone", text: $zone)
                            .textFieldStyle(.roundedBorder)

                        TextField("Equipment", text: $equipment)
                            .textFieldStyle(.roundedBorder)

                        TextField("Fault Summary", text: $faultSummary)
                            .textFieldStyle(.roundedBorder)

                        // Photo of issue
                        Button("Take Photo of Issue") {
                            // Placeholder for camera/image picker
                            print("Camera tapped")
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)

                        Button("Submit Breakdown") {
                            submitBreakdown()
                        }
                        .buttonStyle(.borderedProminent)

                        NavigationLink(
                            destination: destinationView,
                            isActive: $navigateToControl,
                            label: { EmptyView() }
                        )
                        .hidden()
                    }
                    .padding()
                }
            }
        }
        .navigationBarHidden(true)
    }

    // Computed destination for NavigationLink
    var destinationView: some View {
        Group {
            if let breakdown = newBreakdown {
                BreakdownControlView(breakdown: breakdown)
            } else {
                EmptyView()
            }
        }
    }

    func submitBreakdown() {
        let reporter = userManager.username
        let breakdown = Breakdown(
            zone: zone,
            equipment: equipment,
            faultSummary: faultSummary,
            submittedBy: reporter,
            timeSubmitted: Date(),
            status: "Open",
            downtime: 0,
            joinedEngineers: [],
            endTime: nil,
            completedBy: nil,
            rectificationText: nil,
            startTime: Date()
        )
        
        breakdownManager.addBreakdown(breakdown)
        breakdownManager.joinJob(breakdown: breakdown)
        newBreakdown = breakdown
        navigateToControl = true
    }
}